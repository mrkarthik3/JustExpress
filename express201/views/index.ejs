<%- include('head'); %>
<%- include('navbar'); %>

<h1>Home Page</h1>
<!-- 
Let's say you have modular code for header, navbar, footer etc...
You could create a separate EJS template files for those modules and...
Include those templates in any page of your choice like above. 
This will include the code in all of those templates and render the page.

So, this is cool! -->


<!-- <h1><%= msg %></h1>
<h1><%= msg2 %></h1>
<h1><%= validated %></h1>
<p><%- html %></p> -->

<!-- HTML is considered unsafe. Therefore... when = is used, html is escaped and not evaluated.
TO evaluate HTML, you must use - instead of = -->
   
<!-- <%# This is an EJS comment. %>  -->

<!-- Above EJS comment will not show up in DOM -->

<!-- This is a normal comment that shows up in the DOM as a commented HTML !! -->

<!-- Why would anyone want to write <%% in a html file ? -->

<!-- The msg and msg2 are attached to the locals object 
So, they can be accessed using locals.msg or locals.msg2
This locals object is present on response object and it is understood.
So, you can just say locals.msg1 but no need for res.locals.msg1 

BIG PICTURE: All templates( files in "views" folder) have access to properties present on locals object.
There is no need to explicitly say locals.property1, locals.property2 to access
the values of property1 and property2. 

It is assumed that you are on the locals object... So, just use property1, property2 ... directly
instead of using locals.propertyName... like below -->


<!-- <h2><%= locals.msg %></h2>
<h2><%= locals.msg2 %></h2>
<h2><%= locals.validated %></h2> -->



<!-- You can put JS in EJS file.
To put JS, a line should start with "<%" and must end with "%>".
There is no need to put those opening and ending tags for html.
You can put HTML freely.


-->

<!-- Example 1 -->
<!-- <% for(let i=0; i < 10; i++) { %>
    <li>This runs from NodeJS and Express</li>
    <% } %> -->

<!-- Example 2 -->
<!-- <% for(let i=0; i < 10; i++) { %>
    <li>
        <%= i %>
    </li>
    <% } %> -->
<!-- If "=" is used... then that expression is evaluated and inserted there. 
This is generally used to print something to the dom.-->

<!-- Example 3 -->
<!-- <% for(let i=0; i < 10; i++) { %>
<% if (i % 2===0) {txt="even" %>
<% } else { txt="odd" } %>
<li>
<%= i +" - " + txt%>
</li>
<% } %> -->

<!-- If "=" is used... then that expression is evaluated and inserted there. 
This is generally used to print something to the dom.-->

<!--The browser cannot understand EJS.
Therefore, EJS module transpiles (interprets EJS Syntax and converts it to JS code and then to HTML) the above code into 
10 li elements. Those li elements are sent to browser.
So, only pure html is sent to browser  -->

<!-- <p>The end of stuff. This is another stuff </p> -->

<!-- <br>
<br> -->

<!-- As the script can be run by browser, it is sent to the browser directly
Browser will interpret it and do the needful 

Due to recent changes to Helmet Module, You must edit content security policy like below
for code inside script tags to work 

app.use(
  helmet.contentSecurityPolicy({
    useDefaults: true,
    directives: {
      "script-src": ["'unsafe-inline'"],
    },
  })
);
-->

<!-- <script>
for (let i = 0; i < 10; i++) {
document.write(`<li>This is run by Browser</li>`);
}
</script> -->



